classdef TimeMappedArray < ArrayBase
    % TIMEMAPPEDARRAY Lazy array generated by mapping.
    %
    % Author: Vivek Venkatachalam (vivekv2@gmail.com)

    properties (SetAccess = immutable)

        Preimage

        PreimageSize

        % Always the last dimension
        SlicedDimension

        NSlices

        Mapping

    end


    methods

        function obj = TimeMappedArray(array, t_mapping)
            % obj = TIMEMAPPEDARRAY(array, t_mapping)
            %
            %   get_slice(obj, 5) = get_slice(obj, t_mapping(5))

            obj.Preimage = array;
            obj.PreimageSize = size(array);

            obj.Mapping = t_mapping;
            
            obj.NSlices = length(t_mapping);

            obj.Size = [obj.PreimageSize(1:end-1) obj.NSlices];

            sample_slice = obj.get_slice(1);
            obj.ElementClass = element_class(sample_slice);
            obj.SlicedDimension = length(obj.Size);

        end

        function [varargout] = subsref(this, S)

            % Determine which slices we will need to transform
            requested = S.subs{this.SlicedDimension};

            data = zeros([this.Size(1:end-1) length(requested)], ...
                this.ElementClass);

            idx = num2cell(repmat(':', 1, length(this.Size)));
            for i = 1:length(requested)

                idx{end} = i;
                data(idx{:}) = this.get_slice(requested(i));

            end

            new_S = S;
            new_S.subs{this.SlicedDimension} = ':';
            varargout{1} = subsref(data, new_S);

        end

        function data = get_slice(this, t)

            assert(numel(t)==1, ...
                'get_slice can only be called on single slices');

            idx = num2cell(repmat(':', 1, length(this.PreimageSize)));
            idx{end} = this.Mapping(t);

            data = subsref(this.Preimage, ...
                struct('type', '()', 'subs', {idx}));

        end
        
        function array = get_preimage(this)
            array = this.Preimage;
        end

    end

    methods (Static)

        function obj = update_tform(obj, idx, new_tform)

            tforms = obj.Transforms;
            tforms{idx} = new_tform;
            obj = ImwarpedArray(obj.Preimage, tforms, obj.OutputView);

        end

    end

end

